// middlewares/authMiddleware.js
const JWT = require('jsonwebtoken');


exports.authenticateAdmin = async (req, res, next) => {
    try {
        // Get the token from the request header
        const auth = req.header('Authorization');
        if (auth == undefined) {
            return res.status(401).json({
                message: 'Authentication required'
            });
        }
        
        const token = auth.split(' ')[1];
        if (token == undefined) {
            return res.status(401).json({
                message: 'Invalid token'
            });
        }
        
        const decodedToken = await JWT.verify(token, process.env.JWT_SECRET);
        
        // Check if token is for admin
        if (decodedToken.type !== 'admin') {
            return res.status(403).json({
                message: 'Admin privileges required'
            });
        }
        
        // Check for the admin and throw error if not found
        const admin = await Admin.findByPk(decodedToken.adminId);
        if (admin == null) {
            return res.status(404).json({
                message: 'Authentication failed: admin not found'
            });
        }
        
        // Attach only necessary admin data to request
        req.admin = {
            id: admin.id,
            email: admin.email,
            isAdmin: admin.isAdmin,
            isSuperAdmin: admin.isSuperAdmin
        };

        next();
    } catch (error) {
        if (error instanceof JWT.TokenExpiredError) {
            return res.status(401).json({
                message: 'Session timed-out, please login'
            });
        }
        
        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({
                message: 'Invalid token'
            });
        }
        
        console.log(error.message);
        return res.status(500).json({
            message: 'Internal server error'
        });
    }
};

  exports.adminAuth = (req, res, next) => {
    try {
      // Check if admin object exists on request
      if (!req.admin) {
        return res.status(401).json({
          message: 'Authentication required'
        });
      }
      
      if (req.admin.isAdmin !== true) {
        return res.status(403).json({
          message: 'Admin privileges required'
        });
      }
      
      next();
    } catch (error) {
      console.log(error.message);
      return res.status(500).json({
        message: 'Internal server error'
      });
    }
  };
  
  exports.superAdminAuth = (req, res, next) => {
    try {
      // Check if admin object exists on request
      if (!req.admin) {
        return res.status(401).json({
          message: 'Authentication required'
        });
      }
      
      if (req.admin.isSuperAdmin !== true) {
        return res.status(403).json({
          message: 'Super admin privileges required'
        });
      }
      
      next();
    } catch (error) {
      console.log(error.message);
      return res.status(500).json({
        message: 'Internal server error'
      });
    }
  };